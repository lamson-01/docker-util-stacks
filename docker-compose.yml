version: "3.5"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  # postgres:
  #   driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  phpmyadmin:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  opensearch:
    driver: ${VOLUMES_DRIVER}

services:
  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

### MariaDB ##############################################
  mariadb:
    build:
      context: ./mariadb
      args:
        - http_proxy
        - https_proxy
        - no_proxy
        - MARIADB_VERSION=${MARIADB_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
      - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MARIADB_PORT}:3306"
    environment:
      - TZ=${WORKSPACE_TIMEZONE}
      - MYSQL_DATABASE=${MARIADB_DATABASE}
      - MYSQL_USER=${MARIADB_USER}
      - MYSQL_PASSWORD=${MARIADB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - backend

### PostgreSQL ###########################################
  # postgres:
  #   build:
  #     context: ./postgres
  #     args:
  #       - POSTGRES_VERSION=${POSTGRES_VERSION}
  #   volumes:
  #     - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
  #     - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
  #   ports:
  #     - "${POSTGRES_PORT}:5432"
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - GITLAB_POSTGRES_INIT=${GITLAB_POSTGRES_INIT}
  #     - GITLAB_POSTGRES_USER=${GITLAB_POSTGRES_USER}
  #     - GITLAB_POSTGRES_PASSWORD=${GITLAB_POSTGRES_PASSWORD}
  #     - GITLAB_POSTGRES_DB=${GITLAB_POSTGRES_DB}
  #     - JUPYTERHUB_POSTGRES_INIT=${JUPYTERHUB_POSTGRES_INIT}
  #     - JUPYTERHUB_POSTGRES_USER=${JUPYTERHUB_POSTGRES_USER}
  #     - JUPYTERHUB_POSTGRES_PASSWORD=${JUPYTERHUB_POSTGRES_PASSWORD}
  #     - JUPYTERHUB_POSTGRES_DB=${JUPYTERHUB_POSTGRES_DB}
  #     - SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}
  #     - SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}
  #     - SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}
  #     - SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}
  #     - POSTGRES_CONFLUENCE_INIT=${CONFLUENCE_POSTGRES_INIT}
  #     - POSTGRES_CONFLUENCE_DB=${CONFLUENCE_POSTGRES_DB}
  #     - POSTGRES_CONFLUENCE_USER=${CONFLUENCE_POSTGRES_USER}
  #     - POSTGRES_CONFLUENCE_PASSWORD=${CONFLUENCE_POSTGRES_PASSWORD}
  #   networks:
  #     - backend

  ### MongoDB ##############################################
  mongo:
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    # command: --requirepass ${REDIS_PASSWORD} #uncomment if you want to set password
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

### Redis Cluster ##########################################
  redis-cluster:
    build: ./redis-cluster
    ports:
      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    networks:
      - backend

### phpMyAdmin ###########################################
  phpmyadmin:
    build: ./phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      - MYSQL_USER=${PMA_USER}
      - MYSQL_PASSWORD=${PMA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
      - MAX_EXECUTION_TIME=${PMA_MAX_EXECUTION_TIME}
      - MEMORY_LIMIT=${PMA_MEMORY_LIMIT}
      - UPLOAD_LIMIT=${PMA_UPLOAD_LIMIT}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - "${PMA_DB_ENGINE}"
    networks:
      - frontend
      - backend

### Jenkins ###################################################
  jenkins:
    build: ./jenkins
    environment:
      JAVA_OPTS: "-Djava.awt.headless=true"
    ports:
      - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
      - "${JENKINS_HOST_HTTP_PORT}:8080"
    privileged: true
    volumes:
      - ${JENKINS_HOME}:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend
      - backend

### Memcached ############################################
  memcached:
    build: ./memcached
    volumes:
      - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    networks:
      - backend

### ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=${COMPOSE_PROJECT_NAME}-cluster
      - node.name=${COMPOSE_PROJECT_NAME}-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=${COMPOSE_PROJECT_NAME}-node
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - frontend
      - backend

### Kibana ##############################################
  kibana:
    build:
      context: ./kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "${KIBANA_HTTP_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - frontend
      - backend

### OpenSearch ########################################
  opensearch:
    build:
      context: ./opensearch
      args:
        - OPENSEARCH_VERSION=${OPENSEARCH_VERSION}
    environment:
      - cluster.name=${COMPOSE_PROJECT_NAME}-opensearch-cluster
      - node.name=${COMPOSE_PROJECT_NAME}-opensearch-node
      - cluster.initial_cluster_manager_nodes=${COMPOSE_PROJECT_NAME}-opensearch-node
#      - cluster.initial_master_nodes=${COMPOSE_PROJECT_NAME}-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # (for ) Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
#      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - opensearch:/usr/share/opensearch/data
    ports:
      - "${OPENSEARCH_HOST_HTTP_PORT}:9200" # REST API
      - "${OPENSEARCH_HOST_TRANSPORT_PORT}:9600" # required for Performance Analyzer
    networks:
      - frontend
      - backend

### Logstash ##############################################
  logstash:
    build:
      context: ./logstash
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
      - './logstash/pipeline:/usr/share/logstash/pipeline'
    ports:
      - '5001:5001'
    environment:
      LS_JAVA_OPTS: '-Xmx1g -Xms1g'
    env_file:
      - .env
    networks:
      - frontend
      - backend
    depends_on:
      - elasticsearch

### Minio ################################################
  minio:
    build: ./minio
    volumes:
      - ${DATA_PATH_HOST}/minio/data:/export
      - ${DATA_PATH_HOST}/minio/config:/root/.minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    networks:
      - frontend
      - backend

### RabbitMQ #############################################
  rabbitmq:
    build: ./rabbitmq
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      - "${RABBITMQ_WEB_STOMP_HOST_PORT}:15674"
    privileged: true
    hostname: stackdock-rabbitmq
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
    networks:
      - backend

### Grafana ################################################
  grafana:
    build:
      context: ./grafana
    volumes:
      - ${DATA_PATH_HOST}/grafana:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - backend